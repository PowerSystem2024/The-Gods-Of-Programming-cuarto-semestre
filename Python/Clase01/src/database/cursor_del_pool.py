"""
Gestor de Cursores con Context Manager
=====================================

Implementa el patr√≥n Context Manager para manejo autom√°tico de cursores
Seg√∫n diagrama UML con manejo robusto de excepciones
"""

from typing import Optional
from psycopg2.extensions import connection, cursor
from .conexion import Conexion
from src.utils.logger_base import LoggerBase

class CursorDelPool:
    """
    Clase para manejar cursores de base de datos usando context managers
    
    Implementa __enter__ y __exit__ seg√∫n diagrama UML
    Manejo de excepciones para evitar que se detenga la ejecuci√≥n
    """
    
    def __init__(self):
        """
        Constructor seg√∫n UML
        Inicializa los atributos privados _conn y _cursor
        """
        self._conn: Optional[connection] = None
        self._cursor: Optional[cursor] = None
    
    def __enter__(self) -> Optional[cursor]:
        """
        M√©todo para entrar al contexto 'with'
        Seg√∫n UML: +__enter__(self)
        
        Returns:
            Cursor de la base de datos o None si hay error
        """
        try:
            logger = LoggerBase().logger
            logger.debug('üîÑ Iniciando context manager - obteniendo conexi√≥n...')
            
            # Obtener conexi√≥n del pool
            self._conn = Conexion.obtenerConexion()
            if self._conn is None:
                logger.error('‚ùå No se pudo obtener conexi√≥n del pool')
                return None
            
            # Crear cursor
            self._cursor = self._conn.cursor()
            logger.debug('‚úÖ Cursor creado exitosamente')
            
            return self._cursor
            
        except Exception as e:
            logger.error(f'‚ùå Error en __enter__ del CursorDelPool: {e}')
            # Limpiar recursos si hay error
            self._cleanup_on_error()
            raise e  # Re-lanzar para que el c√≥digo que usa el context manager sepa que fall√≥
    
    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """
        M√©todo para salir del contexto 'with'
        Seg√∫n UML: +__exit__(self, exc_type, exc_val, exc_tb)
        
        Args:
            exc_type: Tipo de excepci√≥n si ocurri√≥
            exc_val: Valor de la excepci√≥n si ocurri√≥  
            exc_tb: Traceback de la excepci√≥n si ocurri√≥
        """
        try:
            logger = LoggerBase().logger
            
            if exc_type is not None:
                # Hubo una excepci√≥n durante la ejecuci√≥n
                logger.warning(f'‚ö†Ô∏è  Excepci√≥n detectada en context manager: {exc_type.__name__}: {exc_val}')
                
                if self._conn:
                    self._conn.rollback()
                    logger.info('üîÑ Rollback ejecutado debido a excepci√≥n')
            else:
                # Todo sali√≥ bien, hacer commit
                if self._conn:
                    self._conn.commit()
                    logger.debug('‚úÖ Commit ejecutado exitosamente')
            
        except Exception as e:
            logger.error(f'‚ùå Error durante commit/rollback: {e}')
            # Intentar rollback como √∫ltimo recurso
            try:
                if self._conn:
                    self._conn.rollback()
                    logger.info('üîÑ Rollback de emergencia ejecutado')
            except:
                logger.error('‚ùå Error cr√≠tico: no se pudo hacer rollback de emergencia')
        
        finally:
            # Siempre limpiar recursos
            self._cleanup_resources()
    
    def _cleanup_on_error(self) -> None:
        """Limpia recursos cuando hay error en __enter__"""
        try:
            if self._cursor:
                self._cursor.close()
                self._cursor = None
            if self._conn:
                Conexion.liberarConexion(self._conn)
                self._conn = None
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error limpiando recursos en error: {e}')
    
    def _cleanup_resources(self) -> None:
        """Limpia todos los recursos del context manager"""
        try:
            logger = LoggerBase().logger
            
            # Cerrar cursor
            if self._cursor:
                self._cursor.close()
                logger.debug('üîí Cursor cerrado')
                self._cursor = None
            
            # Liberar conexi√≥n al pool
            if self._conn:
                Conexion.liberarConexion(self._conn)
                logger.debug('üîÑ Conexi√≥n liberada al pool')
                self._conn = None
                
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error al limpiar recursos del CursorDelPool: {e}')
    
    # M√©todos adicionales para depuraci√≥n
    def is_active(self) -> bool:
        """
        Verifica si el context manager est√° activo
        
        Returns:
            bool: True si tiene conexi√≥n y cursor activos
        """
        return self._conn is not None and self._cursor is not None
    
    def get_connection_info(self) -> dict:
        """
        Obtiene informaci√≥n de la conexi√≥n actual
        
        Returns:
            dict: Informaci√≥n de la conexi√≥n
        """
        try:
            if self._conn:
                info = self._conn.get_dsn_parameters()
                return {
                    'host': info.get('host', 'N/A'),
                    'database': info.get('dbname', 'N/A'), 
                    'user': info.get('user', 'N/A'),
                    'port': info.get('port', 'N/A'),
                    'status': 'activa' if not self._conn.closed else 'cerrada'
                }
            return {'status': 'sin_conexion'}
        except Exception as e:
            return {'error': str(e)}
