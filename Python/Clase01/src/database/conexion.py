"""
Gesti√≥n de Conexiones de Base de Datos
======================================

Implementa el patr√≥n Singleton para el pool de conexiones PostgreSQL
Manejo robusto de excepciones seg√∫n requerimientos UML
"""

import sys
import os
from typing import Optional
from psycopg2 import pool, OperationalError, DatabaseError
from psycopg2.extensions import connection

# Agregar config al path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from config.database_config import DatabaseConfig
from src.utils.logger_base import LoggerBase

class Conexion:
    """
    Clase para manejar la conexi√≥n a PostgreSQL usando pool de conexiones
    
    Implementa el patr√≥n Singleton para el pool seg√∫n diagrama UML
    Manejo de excepciones para evitar que se detenga la ejecuci√≥n
    """
    
    # Atributos de clase seg√∫n UML
    _DATABASE: str = DatabaseConfig.DATABASE
    _USERNAME: str = DatabaseConfig.USERNAME  
    _PASSWORD: str = DatabaseConfig.PASSWORD
    _DB_PORT: str = DatabaseConfig.PORT
    _HOST: str = DatabaseConfig.HOST
    _MIN_CON: int = DatabaseConfig.MIN_CONNECTIONS
    _MAX_CON: int = DatabaseConfig.MAX_CONNECTIONS
    _Pool_Pool: Optional[pool.SimpleConnectionPool] = None  # Pool_Pool seg√∫n UML
    
    def __init__(self):
        """Constructor vac√≠o seg√∫n diagrama UML"""
        pass
    
    @classmethod
    def obtenerPool(cls) -> Optional[pool.SimpleConnectionPool]:
        """
        Obtiene el pool de conexiones, lo crea si no existe
        M√©todo seg√∫n UML: +obtenerPool(): Pool
        
        Returns:
            Pool de conexiones o None si hay error
        """
        if cls._Pool_Pool is None:
            try:
                logger = LoggerBase().logger
                logger.info("üîÑ Creando pool de conexiones...")
                
                cls._Pool_Pool = pool.SimpleConnectionPool(
                    minconn=cls._MIN_CON,
                    maxconn=cls._MAX_CON,
                    host=cls._HOST,
                    user=cls._USERNAME,
                    password=cls._PASSWORD,
                    port=cls._DB_PORT,
                    database=cls._DATABASE,
                    client_encoding='utf8'
                )
                
                logger.info(f'‚úÖ Pool de conexiones creado exitosamente')
                logger.info(f'üìä Configuraci√≥n: Host={cls._HOST}, DB={cls._DATABASE}, '
                           f'Pool={cls._MIN_CON}-{cls._MAX_CON} conexiones')
                
                return cls._Pool_Pool
                
            except OperationalError as e:
                LoggerBase().logger.error(f'‚ùå Error de conexi√≥n a PostgreSQL: {e}')
                LoggerBase().logger.error('üí° Verifique que PostgreSQL est√© ejecut√°ndose')
                return None
            except DatabaseError as e:
                LoggerBase().logger.error(f'‚ùå Error de base de datos: {e}')
                return None
            except Exception as e:
                LoggerBase().logger.error(f'‚ùå Error inesperado al crear pool: {e}')
                return None
        else:
            return cls._Pool_Pool
    
    @classmethod
    def obtenerConexion(cls) -> Optional[connection]:
        """
        Obtiene una conexi√≥n del pool
        M√©todo seg√∫n UML: +obtenerConexion(): Connection
        
        Returns:
            Conexi√≥n de PostgreSQL o None si hay error
        """
        try:
            pool_conexiones = cls.obtenerPool()
            if pool_conexiones is None:
                LoggerBase().logger.error('‚ùå No hay pool de conexiones disponible')
                return None
                
            conexion = pool_conexiones.getconn()
            LoggerBase().logger.debug('üîó Conexi√≥n obtenida del pool')
            return conexion
            
        except pool.PoolError as e:
            LoggerBase().logger.error(f'‚ùå Error del pool de conexiones: {e}')
            return None
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error al obtener conexi√≥n: {e}')
            return None
    
    @classmethod
    def liberarConexion(cls, conexion: connection) -> None:
        """
        Libera una conexi√≥n de vuelta al pool
        M√©todo seg√∫n UML: +liberarConexion(conn): void
        
        Args:
            conexion: Conexi√≥n a liberar
        """
        try:
            if conexion and cls._Pool_Pool:
                cls._Pool_Pool.putconn(conexion)
                LoggerBase().logger.debug('üîÑ Conexi√≥n liberada al pool')
        except pool.PoolError as e:
            LoggerBase().logger.error(f'‚ùå Error al liberar conexi√≥n al pool: {e}')
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error inesperado al liberar conexi√≥n: {e}')
    
    @classmethod
    def cerrarConexiones(cls) -> None:
        """
        Cierra todas las conexiones del pool
        M√©todo seg√∫n UML: +cerrarConexiones(): void
        """
        try:
            if cls._Pool_Pool:
                cls._Pool_Pool.closeall()
                cls._Pool_Pool = None
                LoggerBase().logger.info('üîí Pool de conexiones cerrado exitosamente')
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error al cerrar pool de conexiones: {e}')
    
    @classmethod
    def verificar_conexion(cls) -> bool:
        """
        Verifica si la conexi√≥n a la base de datos est√° funcionando
        
        Returns:
            bool: True si la conexi√≥n es exitosa, False en caso contrario
        """
        try:
            conexion = cls.obtenerConexion()
            if conexion:
                cursor = conexion.cursor()
                cursor.execute('SELECT 1')
                resultado = cursor.fetchone()
                cursor.close()
                cls.liberarConexion(conexion)
                
                LoggerBase().logger.info('‚úÖ Verificaci√≥n de conexi√≥n exitosa')
                return resultado[0] == 1
            return False
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error en verificaci√≥n de conexi√≥n: {e}')
            return False
    
    @classmethod
    def get_info_pool(cls) -> dict:
        """
        Obtiene informaci√≥n del estado actual del pool
        
        Returns:
            dict: Informaci√≥n del pool de conexiones
        """
        try:
            if cls._Pool_Pool:
                return {
                    'conexiones_minimas': cls._MIN_CON,
                    'conexiones_maximas': cls._MAX_CON,
                    'host': cls._HOST,
                    'database': cls._DATABASE,
                    'puerto': cls._DB_PORT,
                    'pool_activo': True
                }
            else:
                return {'pool_activo': False}
        except Exception as e:
            LoggerBase().logger.error(f'‚ùå Error al obtener info del pool: {e}')
            return {'error': str(e)}
